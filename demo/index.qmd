---
title: "Data visualization for linguists"
subtitle: "Interactive demo"
author: "Joseph V. Casillas"
date: today
format: html
engine: knitr
webr: 
  show-startup-message: true
  packages: ['ggplot2', 'dplyr', 'tidyr', 'here', 'Hmisc']
filters: 
  - webr
execute:
  fig.retina: 2
---

```{r}
#| label: hard-setup
#| include: false
library("tidyverse")
library("marginaleffects")
new_data <- readRDS(here::here("./misc/new_data.RDS"))
mod <- readRDS(here::here("./misc/mod.rds"))
```


```{webr-r}
#| context: setup

# Get data file
download.file(
  "https://raw.githubusercontent.com/jvcasillas/dv4ss/main/misc/new_data.csv",
  "new_data.csv"
  )

new_data <- read.csv("new_data.csv")
```

# Walkthrough with `ggplot2` ![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png){top=0 right=0 width=50 height=50}

This tutorial serves as a compliment to the [slides](https://www.jvcasillas.com/dv4ss/slides/ua/index.html). 


# Setup

These are some of the packages we will use. 
Note: you do not need to install them for this demo. 

```{r}
#| warning: false
#| message: false
#| eval: false
library("ggplot2")
library("dplyr")
library("tidyr")
library("here")
library("brms")
library("marginaleffects")
```


# It starts with data

Let's take a look at a data set we will use in this demo. 
Try using `head(new_data)` and `summary(new_data)`. 
What kind of information can you learn about the dataframe?

```{webr-r}
#| label: examine-data-ex
# Examine data
head(new_data)
summary(new_data)
```

Let's revist some basic plots

- Histogram
- Scatterplots
- Boxplots
- Point estimate + spread

## Histogram 

::: {.panel-tabset}

### Beginner

```{webr-r}
#| label: p-histogram-ex-beg
#| fig-asp: 1
# Continuous variable on the x-axis
ggplot(
  data = new_data, 
  mapping = aes(x = score)
) + 
  geom_histogram() 
```

### Intermediate

```{webr-r}
#| label: p-histogram-ex-int
#| fig-asp: 1
# Streamline code and adjust options
ggplot(new_data) + 
  aes(x = score) + 
  geom_histogram(
    color = "black", 
    fill = "grey70", 
    bins = 9
  ) + 
  theme_bw(
    base_size = 12, 
    base_family = "Palatino"
  )
```

:::

## Scatterplot

::: {.panel-tabset}

### Beginner

```{webr-r}
#| label: p-scatterplot-ex-beg
#| fig-asp: 1
# Continuous variables on both axis
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  geom_point() 
```

### Intermediate

```{webr-r}
#| label: p-scatterplot-ex-int
#| fig-asp: 1
# Include aesthetic mapping from inside geom_point()
ggplot(new_data) + 
  aes(x = proficiency, y = score) + 
  geom_point(aes(color = group), size = 4) + 
  theme_minimal(
    base_size = 12, 
    base_family = "Palatino"
  ) + 
  theme(legend.position = c(.15, .85))
```

### Advanced

```{webr-r}
#| label: p-scatterplot-ex-adv
#| fig-asp: 1
# Adjust colors, add regression line
ggplot(new_data) + 
  aes(x = proficiency, y = score) + 
  geom_point(
    aes(fill = group), 
    size = 4, pch = 21
  ) + 
  geom_smooth(method = lm, formula = "y ~ x") + 
  scale_fill_viridis_d(
    name = NULL, 
    option = "E", 
    begin = 0.4, end = 0.8
  ) + 
  theme_minimal(
    base_size = 12, 
    base_family = "Palatino"
  ) + 
  theme(legend.position = c(.15, .85))
```

:::


## Boxplot (box and whisker plot)

::: {.panel-tabset}

### Beginner

```{webr-r}
#| label: p-boxplot-ex-beg
#| fig-asp: 1
# Try a different geom
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score)
) + 
  geom_boxplot() 
```

### Intermediate

```{webr-r}
#| label: p-boxplot-ex-int
#| fig-asp: 1
# Adjust colors, new theme
ggplot(new_data) + 
  aes(x = group, y = score, fill = group) + 
  geom_boxplot() + 
  scale_fill_viridis_d(begin = 0.3, end = 0.8) + 
  theme_classic(base_size = 12, base_family = "Palatino") + 
  theme(legend.position = c(0.8, 0.85))
```

### Advanced

```{webr-r}
#| label: p-boxplot-ex-adv
#| fig-asp: 1
# Overlay raw data
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_boxplot(aes(fill = group), show.legend = F) + 
  geom_jitter(
    height = 0, width = 0.2, 
    size = 4, alpha = 0.4
  ) + 
  scale_fill_viridis_d(
    name = NULL, 
    begin = 0.3, end = 0.8
  ) + 
  labs(x = NULL) + 
  theme_classic(base_size = 12, base_family = "Palatino") 
```

:::

Need a refresher regarding what a boxplot is? 
See [here](https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/rstats_iqr.png).

## A better way... point estimate + spread {.smaller}

::: {.panel-tabset}

### Beginner

```{webr-r}
#| label: p-point-estimate-spread-ex-beg
#| fig-asp: 1
# Point estimate can be mean, median, mode, 
# Spread can be SD, SE, 95% CI, etc.
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score) 
) + 
  stat_summary(
    fun.data = mean_sdl, 
    geom = 'pointrange', 
    size = 1, 
    linewidth = 1
  ) 
```

### Intermediate

```{webr-r}
#| label: p-point-estimate-spread-ex-int
#| fig-asp: 1
# Customize, add caption
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_point(alpha = 0.3, size = 4) + 
  stat_summary(
    fun.data = mean_cl_boot, 
    geom = 'pointrange', 
    size = 2, 
    linewidth = 1
  ) + 
  labs(caption = "Mean ±95% CI") + 
  theme_minimal(base_size = 12, base_family = "Palatino")
```

### Advanced

```{webr-r}
#| label: p-point-estimate-spread-ex-adv
#| fig-asp: 1
# Customize points and gridlines, add jitter
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_jitter(
    height = 0, width = 0.2, 
    alpha = 0.3, size = 3
  ) + 
  stat_summary(
    aes(fill = group), 
    fun.data = mean_se, 
    geom = 'pointrange', 
    size = 1, linewidth = 1, 
    pch = 21, show.legend = F
  ) + 
  labs(y = "Score", x = NULL, caption = "Mean ±SE") + 
  scale_fill_viridis_d(
    option = "A", begin = 0.3, end = 0.7
  ) + 
  theme_minimal(
    base_size = 12, base_family = "Palatino"
  ) + 
  theme(
    axis.title.y = element_text(size = rel(0.9), hjust = 0.95),
    axis.title.x = element_text(size = rel(0.9), hjust = 0.95),
    panel.grid.major = element_line(color = 'grey80', linewidth = 0.15),
    panel.grid.minor = element_line(color = 'grey80', linewidth = 0.15)
  )
```

:::


## Faceting

What about when we want to see more factors at once? 
For example, what if we want to see **score** as a function of **proficiency** and **age**? 
We use `facet_wrap()` or `facet_grid()` to create facets

::: {.panel-tabset}

### Horizontal

```{webr-r}
#| label: p-shapes-ex1
#| fig-height: 3
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  facet_grid(. ~ age) + 
  geom_point()
```

### Vertical

```{webr-r}
#| label: p-shapes-ex2
#| fig-height: 5
ggplot(
  data = new_data, 
  mapping = aes(
    x = age, y = score
  )
) + 
  facet_grid(group ~ .) + 
  geom_boxplot()
```

:::


# More exercises

Want to challenge yourself a bit more?
Using `new_data`, create the following: 

1. a boxplot with a variable mapped to the `fill` aesthetic
2. a boxplot with a variable mapped to the `color` aesthetic and a horizontal facet
3. a scatterplot with a regression line (see `?geom_smooth`)
4. a scatterplot with a regression line (see `?geom_smooth`) and a categorical factor (try the aesthetic `shape`)
5. a histogram of `proficiency`
6. What does `geom_violin()` do? 
What geom can it replace?

::: {.panel-tabset}

### Practice here

```{webr-r}
#| label: blank-console
ggplot(
  data = new_data, 
  mapping = aes()
) + 





```

### Solution 1

```{webr-r}
#| label: solution1
# Boxplot with a variable mapped to the `fill` aesthetic
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score, fill = group)
) + 
  geom_boxplot()
```

### Solution 2

```{webr-r}
#| label: solution2
# Boxplot with a variable mapped to `color` aesthetic and a horizontal facet
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score, color = group)
) + 
  facet_grid(. ~ age) + 
  geom_boxplot() 
```

### Solution 3

```{webr-r}
#| label: solution3
# Scatterplot with regression line (see `?geom_smooth`)
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  geom_point() + 
  geom_smooth(method = "lm", formula = "y ~ x")
```

### Solution 4

```{webr-r}
#| label: solution4
# Scatterplot with regression line and categorical factor (try aesthetic `shape`)
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  geom_point(aes(shape = group)) + 
  geom_smooth(method = "lm", formula = "y ~ x")
```

### Solution 5

```{webr-r}
#| label: solution5
# Histogram of `proficiency`
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency)
) + 
  geom_histogram(color = "black", fill = "grey", bins = 7)
```

### Solution 6

```{webr-r}
#| label: solution6
# `geom_violin()` (replacement for geom_boxplot)
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score, shape = group)
) + 
  geom_point() + 
  geom_violin(fill = NA)
```

:::






# Next level... raw data + model estimates

Let's explore another example in which we plot raw data along with some type of summary from a statistical model. 
For this example we will fit a Bayesian regression model exploring `score` as a function of `proficiency`. 
In truth, the model was fit behind the scenes and loaded for you, but we did this using the following code: 

```{r}
#| label: model-est-brm-code
#| eval: false
# Fit bayesian regression model
mod <- brm(formula = score ~ proficiency, family = Beta(), data = new_data)
```

Now we plot the raw data and use the `marginaleffects` package to sample from the posterior predictive distribution. 

```{r}
#| label: model-est-brm-plot
#| message: false
#| fig-asp: 0.56
#| out-width: "100%"
predictions(
  mod, 
  newdata = datagrid(
    proficiency = seq(-2.5, 2.5, 0.1)
  )
) |>
  posterior_draws() |> 
  mutate(drawid = as.numeric(drawid)) |> 
  filter(drawid < 300) |> 
  ggplot() + 
  aes(x = proficiency, y = draw) + 
  geom_line(aes(group = drawid), alpha = 0.1) + 
  stat_summary(fun = mean, geom = "line", color = "#cc0033", linewidth = 2) + 
  geom_point(
    data = new_data, aes(y = score), 
    size = 3, pch = 21, fill = "grey30"
    ) +
  labs(
    y = "Score", x = "Proficiency", 
    title = "Scores as a function of proficiency", 
    subtitle = "300 draws from the posterior predictive distribution"
  ) + 
  ggdark::dark_theme_minimal(base_size = 18, base_family = "Palatino")
```







# Review 

## Good principles 

- Remember 💩
- Colorblind friendly palettes (e.g., [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html))
- Highlight important things
- Help your target audience (reader)
- Plot raw data, and statistical summary or model estimates whenever possible

## Bad principles (according to the internet)

::::{.columns}
:::{.column width="50%"}
- Plots without context
- Illegible fonts
- A line graph with unordered x-axis
- A legend with a zillion categories
- A pie chart
- Axis with scientific notation
:::

:::{.column width="50%"}
- Uninterpretable variable names
- Dual y-Axis
- Bar plots that could be boxplots
- Non-color blind friendly color scales
- Angled text
:::
::::








# Help! (resources)

- [SimplPoints (Timo Roettger youtube channel))](https://www.youtube.com/@simplpoints/videos)
- [Data Visualization with R (course)](https://datavizf23.classes.andrewheiss.com/syllabus.html)
- [The Truthful Art: Data, Charts, and Maps for Communication](https://www.amazon.com/Truthful-Art-Data-Charts-Communication/dp/0321934075)
- [Data Visualization: A Practical Introduction](http://socviz.co/)
- [Fundamentals of Data Visualization](https://serialmentor.com/dataviz/)
