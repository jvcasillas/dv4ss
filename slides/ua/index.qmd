---
title: "Data visualization for linguists"
subtitle: ""
author: "Joseph V. Casillas | Rutgers University"
institute: "33rd Graduate and Professional Symposium on Hispanic and Luso-Brazilian Literature, Language and Culture<br>University of Arizona"
date: "2024/03/23 (Last update: `r Sys.Date()`)"
format: rutgers-revealjs
engine: knitr
bibliography: ../../bib/refs.bib
---

```{r}
#| label: setup
#| include: false
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  echo = TRUE, 
  fig.asp = 0.5625,
  out.width = "100%", 
  fig.retina = 2, 
  dpi = 300
  )

set.seed(20230906)

library("tidyverse")
library("ggimage")
library("patchwork")
library("here")

theme_psllt <- function(...) {
  list(
    theme_bw(base_family = "Palatino", ...), 
    theme(
      plot.subtitle = element_text(color = "grey40"), 
      panel.grid.major = element_line(color = 'grey90', linewidth = 0.15),
      panel.grid.minor = element_line(color = 'grey90', linewidth = 0.15)
    )
  )
}

theme_set(theme_grey(base_size = 30))

```

[slido](https://wall.sli.do/event/uJq8E28ssc3oWCkQJ9EkBL?section=e89fa587-9303-4b5a-8534-a8b000fb89e8)

## How to use this workshop

. . .

::: {.r-fit-text}
Do you know R?
:::

. . .

:::: {.columns}
::: {.column width="50%"}
[Yes]{style="color: blue;"}

- Follow along, do examples
- Watch
- Both (as attention allows)
:::

::: {.column width="50%"}
[No]{.emph}

- Watch
- Come back when time and resources allow
:::
::::



## Follow along

::::: {layout="[[-1], [1], [-1]]"}
:::: {.columns}
::: {.column width="33%"}
:::
::: {.column width="33%"}
{{< qrcode https://www.jvcasillas.com/dv4ss/index.html qrsite width=300 height=300 colorDark='#cc0033' colorLight='#fff' >}}
:::
::: {.column width="33%"}
:::
::::
:::::








# Goals {.transition}

## {.transition data-menu-title="Goals (as researchers)"}

[Goals (as researchers)]{.emph}

::: {.r-fit-text}

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
make elegant, truthful plots
:::
:::

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
help reader understand data
:::
:::

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
make process repeatable, shareable
:::
:::

:::

## Goals (today)

::: {.r-fit-text}

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
get you started making elegant, <br>truthful plots
:::
:::

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
discuss pitfalls, bad practices
:::
:::

::: {.fragment .fade-up}
::: {.fragment .semi-fade-out}
provide resources to help you <br>continue learning
:::
:::

:::







# {.transition data-menu-title="Speak for yourself"}

Just use a table...  
the data speaks for itself...

## {background-color="black" background-image="../assets/img/dino_data.gif" background-size="contain" data-menu-title="The datasaurus"}

::: footer
[datasaurus: same stats, different graph](https://www.research.autodesk.com/publications/same-stats-different-graphs/)
:::

## {.transition data-menu-title="Liars"}

<br><br><br>

"Stats don't lie, but liars use stats"  
"The numbers don't lie, but liars use numbers"  
[(same idea)]{style="color: grey;"}






# It's not easy...

## {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/os_heartbreak.png" data-menu-title="Be kind"}

::: {.notes}
- getting good takes time
- be patient
- be kind to yourself
- do the best you can at the time
:::

## {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/general/memes/sucking1.png" background-size=90% data-menu-title="Sucking..."}

::: {.notes}
its ok to suck
:::

## {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/general/memes/draw_owl.png" background-size=65% data-menu-title="Drawing the owl"}

## {data-menu-title="Choose your fighter"}

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-flexibility-difficulty
#| echo: false

img_vec <- list.files(
  here("slides", "assets", "img", "ggimage"), 
  full.names = T
  )

tribble(
  ~'x', ~'y', ~'img',    ~'url',      ~'size', 
  -2.5,  -2.5, 'excel',   img_vec[1],   0.15, 
  -1.0,  -1.0, 'spss',    img_vec[2],   0.15, 
   1.3,   1.8, 'r',       img_vec[3],   0.18, 
   2.5,   1.9, 'd3',      img_vec[4],   0.12, 
   2.5,   0.5, 'python',  img_vec[5],   0.15, 
   2.5,   2.7, 'plotly',  img_vec[6],   0.25, 
  -2.2,  -1.3, 'jasp',    img_vec[7],   0.15, 
   1.4,  -0.5, 'matlab',  img_vec[8],   0.15, 
   0.0,   0.0, 'tableau', img_vec[9],   0.30, 
  ) |>
  ggplot() + 
  aes(x = x, y = y, label = img) + 
  geom_image(aes(image = url, size = size)) + 
  scale_size_identity() + 
  coord_cartesian(xlim = c(-3, 3), ylim = c(-3, 3)) + 
  labs(y = "Flexibility\nand power", x = "Learning curve") + 
  theme_classic(base_family = "Palatino") + 
  theme(
    axis.title = element_text(size = 18), 
    axis.title.y = element_text(angle = 0, vjust = 0.5), 
    axis.text = element_blank(), 
    axis.ticks = element_blank()
  )
```

:::

## {data-menu-title="Learning process"}

```{r}
#| label: p-goals-1
#| echo: false
#| include: false

descriptions <- tribble(
  ~'x', ~'y', ~'lab', 
  -1.25, -1.25, "Back to the\ndrawing board", 
  -1.25,  1.25, "Fun, but\nuseless", 
   1.25, -1.25, "Suitable, but\nnot ideal", 
   1.25,  1.25, "The sweet spot"
)



p_goals_bare <- ggplot() + 
  aes(x = x, y = y) + 
  geom_segment(data = tibble(x = -2, xend = 2, y = 0, yend = 0), 
    aes(x = x, xend = xend, y = y, yend = yend), 
    linewidth = 1, lineend = "round", linejoin = "mitre") +
  geom_segment(data = tibble(x = 0, xend = 0, y = -2, yend = 2), 
    aes(y = y, yend = yend, x = x, xend = xend), 
    linewidth = 1, lineend = "round", linejoin = "mitre") +
  coord_cartesian(xlim = c(-2.1, 2.1), ylim = c(-2.1, 2.1)) + 
  labs(x = NULL, y = NULL) + 
  theme_minimal(base_size = 26, base_family = "Palatino") + 
  theme(
    axis.ticks = element_blank(), 
    axis.text = element_blank(), 
    panel.grid.major = element_line(color = 'grey90', linewidth = 0.15),
    panel.grid.minor = element_line(color = 'grey90', linewidth = 0.15)
  )

p_goals_bare
```

```{r}
#| label: p-goals-2
#| echo: false
#| include: false

p_goals_bare + 
  geom_rect(inherit.aes = F, 
    data = tibble(xmin = -2, xmax = 0, ymin = -2, ymax = 2), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    fill = "#cc0033", alpha = 0.1
  ) + 
  geom_text(
    data = tibble(x = 0, y = -2.1, lab = "← Interpretability →"), 
    aes(x = x, y = y, label = lab), size = 10
  )
```

```{r}
#| label: p-goals-3
#| echo: false
#| include: false

p_goals_bare + 
  geom_rect(inherit.aes = F, 
    data = tibble(xmin = 0, xmax = 2, ymin = -2, ymax = 2), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    fill = "blue", alpha = 0.1
  ) + 
  geom_text(
    data = tibble(x = 0, y = -2.1, lab = "← Interpretability →"), 
    aes(x = x, y = y, label = lab), size = 10
  )
```

```{r}
#| label: p-goals-4
#| echo: false
#| include: false

p_goals_bare + 
  geom_rect(inherit.aes = F, 
    data = tibble(xmin = -2, xmax = 2, ymin = -2, ymax = 0), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    fill = "#cc0033", alpha = 0.1
  ) + 
  geom_text(
    data = tibble(x = -2.1, y = 0, lab = "← Aesthetics →"), 
    aes(x = x, y = y, label = lab), angle = 90, size = 10
  )
```

```{r}
#| label: p-goals-5
#| echo: false
#| include: false

p_goals_bare + 
  geom_rect(inherit.aes = F, 
    data = tibble(xmin = -2, xmax = 2, ymin = 0, ymax = 2), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    fill = "blue", alpha = 0.1
  ) + 
  geom_text(
    data = tibble(x = -2.1, y = 0, lab = "← Aesthetics →"), 
    aes(x = x, y = y, label = lab), angle = 90, size = 10
  )
```

```{r}
#| label: p-goals-6
#| echo: false
#| include: false

p_goals <- p_goals_bare + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre", 
    arrow = arrow(ends = "both", length = unit(0.03, "npc"))) + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre", 
    arrow = arrow(ends = "both", length = unit(0.03, "npc"))) + 
  labs(y = "Uninterpretable", x = "Ugly") + 
  scale_x_continuous(sec.axis = sec_axis(~., name = "Elegant")) + 
  scale_y_continuous(sec.axis = sec_axis(~., name = "Interpretable"))

p_goals
```

```{r}
#| label: p-goals-7
#| echo: false
#| include: false

p_goals + 
  geom_text(
    data = descriptions[1, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

```{r}
#| label: p-goals-8
#| echo: false
#| include: false

p_goals + 
  geom_text(
    data = descriptions[1:2, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

```{r}
#| label: p-goals-9
#| echo: false
#| include: false

p_goals + 
  geom_text(
    data = descriptions[1:3, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

```{r}
#| label: p-goals-10
#| echo: false
#| include: false

p_goals + 
  geom_rect(inherit.aes = F, 
    data = tibble(xmin = 0, xmax = 2, ymin = 0, ymax = 2), 
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), 
    fill = "green", alpha = 0.1
  ) + 
  geom_text(
    data = descriptions, 
    aes(label = lab)
  ) 
```

::: {layout="[[-1], [1], [-1]]"}
::: {.r-stack}
![](./index_files/figure-revealjs/p-goals-1-1){width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-2-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-3-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-4-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-5-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-6-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-7-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-8-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-9-1){.fragment width="100%" height="100%"}

![](./index_files/figure-revealjs/p-goals-10-1){.fragment width="100%" height="100%"}
:::
:::

## {background-image="../assets/img/bad_plot_0.png" background-size="contain" data-menu-title="The ugliest plot in the world"}







# Some principles of graphic design

[💩]{style="font-size: 2em;"}

## CRAP 💩

:::: {.columns}
::: {.column width="50%"}
[C]{.emph style="font-size: 2.5em;"}[ontrast]{style="font-size: 2.5em;"}  
[R]{.emph style="font-size: 2.5em;"}[epetition]{style="font-size: 2.5em;"}  
[A]{.emph style="font-size: 2.5em;"}[lignment]{style="font-size: 2.5em;"}  
[P]{.emph style="font-size: 2.5em;"}[roximity]{style="font-size: 2.5em;"}
:::
::: {.column width="50%"}
![](../assets/img/non_designers.png){.absolute top=100 right=10 width="350" height="500"}

[@williams2015]{.absolute bottom=5 right=10}
:::
::::

## Contrast

If two things aren't the same, make them *very* different

. . .

- Colors
  - complex
  - accessibility for color blindness (color.adobe.com)

- Fonts
  - weight
  - size
  - family

- Shapes


## {data-menu-title="Contrast ex."}

::::: {layout="[[-1], [1], [-1]]"}
:::: {.columns}
::: {.column width="50%"}

```{r}
#| label: contrast-ex1
#| echo: false
#| fig.asp: 1

data("ChickWeight")
ChickWeight |> 
  ggplot() + 
  aes(x = Time, y = weight, color = Diet) + 
  geom_path(aes(group = Chick), linewidth = 1, show.legend = F) + 
  geom_point(size = 4) + 
  scale_color_viridis_d(option = "A", begin = 0.3, end = 0.5) + 
  labs(title = "", subtitle = "", y = "Weight") + 
  theme_psllt(base_size = 30) + 
  theme(
    legend.position = c(0.1, 0.8), 
    plot.title = element_text(family = "Palatino", size = 40), 
    plot.subtitle = element_text(family = "Palatino", color = "grey40")
  )
```
:::

::: {.column width="50%"}

```{r}
#| label: contrast-ex2
#| echo: false
#| fig-asp: 1

cw_ex_dat <- ChickWeight |> 
  mutate(
    diet = if_else(Diet == 3, "Diet 3", "Not diet 3"), 
    alpha = if_else(diet == "Diet 3", 1, 0.3)
  ) 

cw_ex <- ggplot() +
  aes(x = Time, y = weight) + 
  geom_path(data = filter(cw_ex_dat, diet == "Not diet 3"), 
    aes(group = Chick, color = diet, alpha = alpha), linewidth = 1.5) + 
  geom_point(data = filter(cw_ex_dat, diet == "Not diet 3"), 
    aes(fill = diet, shape = diet, alpha = alpha), size = 6) + 
  geom_path(data = filter(cw_ex_dat, diet != "Not diet 3"), 
    aes(group = Chick, color = diet, alpha = alpha), linewidth = 1.5) + 
  geom_point(data = filter(cw_ex_dat, diet != "Not diet 3"), 
    aes(fill = diet, shape = diet, alpha = alpha), size = 6) + 
  scale_fill_manual(name = "Diet", values = c("#cc0033", "grey60")) + 
  scale_color_manual(name = "Diet", values = c("#cc0033", "grey60")) + 
  scale_shape_manual(name = "Diet", values = c(23, 21)) + 
  scale_alpha_identity() + 
  labs(title = "Chick weight", subtitle = "Weight (g) since birth.", 
       y = "Weight") + 
  theme_psllt(base_size = 30) + 
  theme(
    legend.position = c(0.15, 0.85), 
    plot.title = element_text(family = "Palatino", size = 40), 
    plot.subtitle = element_text(family = "Palatino", color = "grey30")
  )

cw_ex
```
:::
::::
:::::

---

## Repetition

Repeat *themes* throughout doc, presentation, article, etc.

:::: {.columns}
::: {.column width="50%"}

<br>

- Colors palettes
- Fonts (families, weights, sizes)
- Other graphical elements (alignments, etc.)
:::

::: {.column width="50%"}
```{r}
#| label: contrast-repeat
#| echo: false
#| fig-asp: 1
cw_ex
```
:::
::::

## Alignment

Elements on page/screen/plot have visual connection with something else on page/screen/plot

::: {.r-stack}
![](../assets/img/alignment_0.png){.fragment width="70%" height="70%" .absolute top=205 right=200}

![](../assets/img/alignment_1.png){.fragment width="70%" height="70%" .absolute top=205 right=200}

![](../assets/img/alignment_2.png){.fragment width="70%" height="70%" .absolute top=205 right=200}
:::

::: footer
Heiss (2023)
:::

## Proximity

Group related items together

- Focus on document layout

- Probably less applicable to dataviz

## {.transition data-menu-title="You can learn to CRAP 💩"}

<br><br><br><br>
[You can learn to CRAP 💩]{style="font-size: 1.5em;"}

::: notes
learnable
takes practice
:::







# Example plots

## Common types of plots

- Pie charts
- Bar graphs
- Boxplots  
- Historgrams, density plots
- Scatterplots  
- Heatmaps
- Etc.

## Pie charts {background-image="../assets/img/plots_pie.png" background-size=contain background-color="black"}

## Bar graphs {visibility="uncounted"}

```{r}
#| label: bargraph-ex
#| echo: false
mtcars %>%
  group_by(am) %>% 
  summarize(mean_mpg = mean(mpg)) %>% 
  ggplot(., aes(x = factor(am), y = mean_mpg, fill = factor(am))) + 
    geom_bar(stat = 'identity', show.legend = F) + 
    ylim(0, 40) + 
    labs(x = NULL, y = "% Correct") + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Monolingual', 'Bilingual')) + 
    scale_fill_manual(
      name = NULL, 
      values = c("grey80", "#cc0033"), 
      labels = c('Monolingual', 'Bilingual')
    ) +
    theme_psllt(base_size = 18)
```

## {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/rstats_bargraphs.png" background-size="50%" background-color="black" data-menu-title="Bar graph push back" visibility="uncounted"}

## Boxplots {visibility="uncounted"}

```{r}
#| label: boxplot-ex
#| echo: false
mtcars %>%
  ggplot(., aes(x = factor(am), y = mpg, fill = factor(am))) + 
    geom_boxplot(show.legend = F) + 
    coord_cartesian(ylim = c(0, 40)) + 
    labs(x = NULL, y = "% correct") + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Monolingual', 'Bilingual')) + 
    scale_fill_manual(
      name = NULL, 
      values = c("grey80", "#cc0033"), 
      labels = c('Monolingual', 'Bilingual')
    ) + 
    theme_psllt(base_size = 18)
```

## Historgrams, density plots {visibility="uncounted"}

::::: {layout="[[-1], [1], [-1]]"}
:::: {.columns}
::: {.column width="50%"}
```{r}
#| label: histogram-ex
#| echo: false
#| fig.asp: 1
hist_dens_dat <- tibble(vals = rnorm(1e4, 60, 10)) 

hist_dens_dat |> 
  ggplot() +
  aes(x = vals) + 
  geom_histogram(bins = 30, color = "black", fill = "grey80") + 
  labs(y = NULL, x = "LexTALE score") + 
  theme_psllt(base_size = 30)
```
:::

::: {.column width="50%"}
```{r}
#| label: density-ex
#| echo: false
#| fig.asp: 1
hist_dens_dat |> 
  ggplot() +
  aes(x = vals) + 
  geom_density(fill = "#cc0033") + 
  labs(y = NULL, x = "LexTALE score") + 
  theme_psllt(base_size = 30)
```
:::
::::
:::::

## Scatterplots {visibility="uncounted"}

```{r}
#| label: scatter-plot-ex
#| echo: false

ggplot(
  data = mtcars, 
  mapping = aes(x = drat, y = mpg)
) + 
  geom_point() + 
  labs(y = "% correct", x = "Proficiency") + 
  theme_psllt(base_size = 18)
```

## Heatmaps {visibility="uncounted"}

::: {.r-stack}
![](../assets/img/plot_heatmap_0.png){.absolute top=150 right=60 width="80%"}

![](../assets/img/plot_heatmap_1.png){.fragment .absolute top=65 right=65 width="80%"}
:::








# Grammar of graphics

## What you need to know

![](../assets/img/gog.png){.absolute top=100 right=0 height=75%}

[@wilkinson2012grammar]{.absolute bottom=5 right=10}

We are interested in mapping <br>**data** to **aesthetics**

. . .

[What is data?]{style="color: blue;"}

- a column(s) in a dataframe <br>(excel, .csv, .tsv, etc.)

. . .

[Aesthetics?]{style="color: blue;"}

- a visual property of a plot, <br>i.e., position, shape, color, etc.






# {background-color="black" data-menu-title="ggplot2" background-image="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tidyverse.png" background-size="45%"}

![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png){.absulute top=400 left=0 width="20%" height="20%"}

## {background-image="../assets/img/ggplot_layers.png" background-size="contain" data-menu-title="GoG applied - ggplot2"}

## ggplot2 overview

- Written by Hadley Wickham when he was a graduate student at Iowa State

- Automatically deals with spacings, text, titles but also allows you to annotate by "adding"

- Plots are built up in layers 

- Plot the data, overlay a summary, meta data and/or annotation

## Components

- Works with a dataframe

- aesthetic mappings: how data are mapped to coordinates, color, size, shape, etc.

- geoms: geometric objects like points, lines, boxplots, etc. 

- stats: statistical transformations

- facets: 'panels' for conditional plots

## {data-menu-title="Back to the chicks..."}

::: {layout="[[-1], [1], [-1]]"}
```{r}
#| label: chicks-repeat
#| echo: false
cw_ex + 
  theme_psllt(base_size = 18) + 
  theme(legend.position = c(0.1, 0.85))
```
:::

## {data-menu-title="Data to aesthetic mapping"}

::: {layout="[[-1], [1], [-1]]"}

| Data   | Aesthetic    | Geometry     |
| :----- | :----------- | :----------- | 
| Time   | x-axis       | point, line  |
| Weight | y-axis       | point, line  |
| Chick  | point        | point, line  |
| Diet   | color, shape | point, shape |

:::

## {data-menu-title="Aesthetic to geom mapping"}

::: {layout="[[-1], [1], [-1]]"}

| Data   | aes()        | geom_\*    |
| :----- | :----------- | :--------- | 
| Time   | x            | geom_point |
| Weight | y            | geom_point |
| Chick  | color        | geom_point |
| Diet   | color, shape | geom_point + geom_line |

:::

## A template...

```{r}
#| label: plotting-template
#| eval: false
ggplot(
  data = DATA_FRAME, 
  mapping = aes(AESTHETIC)
) + 
  geom_xxx()
```

. . .

- **DATA_FRAME** will be replaced with your dataframe
- **AESTHETIC** will be replaced with the aesthetic mappings of your choice
- **geom_xxx** will be replaced with a specific geom, i.e., `geom_point()`

## It starts with data

- Let's take a look at a dataframe

```{r}
#| label: load-data
link <- url("https://github.com/jvcasillas/dv4ss/raw/main/misc/new_data.RDS")
new_data <- readRDS(link)
```

- Try using `head(new_data)` and `summary(new_data)`

- What kind of information did you learn about the dataframe?

## Get to know the data

```{r}
#| label: explore1
head(new_data) # show first 6 rows
```

<br>

```{r}
#| label: explore2
summary(new_data) # get general summary
```

## Aesthetics (aes()) {.smaller}

- Aesthetic mappings: how we map data to color, size, and **axis**...

- Let's update our template

::::{.columns}
:::{.column width="50%"}
```{r}
#| label: aes-ex
#| code-line-numbers: "3"
#| eval: false
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) 
```
:::

:::{.column width="50%"}
```{r}
#| label: aes-ex-p
#| code-line-numbers: "3"
#| echo: false
#| fig.asp: 1
#| fig.height: 3
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  labs(title = NULL, subtitle = NULL)
```
:::
::::

## Geometric objects (geom_\*) {.smaller}

```{r}
#| label: p-geom-ex
#| eval: false
#| code-line-numbers: "5"
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  geom_point()
```

There are many types of geoms...

- geom_point()
- geom_smooth()
- geom_hist()
- geom_bar()
- geom_boxplot()
- etc. 

## Statistical transformations (stat_\*)

- `stat_summary()` will calculate a value (e.g., mean, median) and overlay it

```{r}
#| label: p-stat-sum-ex
#| eval: false
#| code-line-numbers: "5-7"
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score)
) + 
  stat_summary(
    fun.data = mean_sdl, 
    geom = 'pointrange'
  )
```






# Walkthrough with [ggplot2]{style="color: blue;"} {.transition}

![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png){.absolute top=200 right=0 width=400" height="400"}

## Let's revist some basic plots

- Histogram

- Scatterplots

- Boxplots

- Point estimate + spread

## Histogram {.smaller}

::: {.panel-tabset}

### Beginner

```{r}
#| label: p-histogram-ex-beg
#| fig.asp: 1
#| output-location: column
#| code-line-numbers: "3|4|6"
# Continuous variable on the x-axis
ggplot(
  data = new_data, 
  mapping = aes(x = score)
) + 
  geom_histogram() 
```

### Intermediate

```{r}
#| label: p-histogram-ex-int
#| fig.asp: 1
#| output-location: column
# Streamline code and adjust options
ggplot(new_data) + 
  aes(x = score) + 
  geom_histogram(
    color = "black", 
    fill = "grey70", 
    bins = 9
  ) + 
  theme_bw(
    base_size = 30, 
    base_family = "Palatino"
  )
```

:::

## Scatterplot {.smaller}

::: {.panel-tabset}

### Beginner

```{r}
#| label: p-scatterplot-ex-beg
#| fig.asp: 1
#| output-location: column
#| code-line-numbers: "3|4|6"
# Continuous variables on both axis
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  geom_point() 
```

### Intermediate

```{r}
#| label: p-scatterplot-ex-int
#| fig.asp: 1
#| output-location: column
# Include aesthetic mapping from inside
# geom_point()
ggplot(new_data) + 
  aes(x = proficiency, y = score) + 
  geom_point(aes(color = group), size = 4) + 
  theme_minimal(
    base_size = 30, 
    base_family = "Palatino"
  ) + 
  theme(legend.position = c(.15, .85))
```

### Advanced

```{r}
#| label: p-scatterplot-ex-adv
#| fig.asp: 1
#| output-location: column
# Adjust colors
# Add regression line
ggplot(new_data) + 
  aes(x = proficiency, y = score) + 
  geom_point(
    aes(fill = group), 
    size = 4, pch = 21
  ) + 
  geom_smooth(method = lm, formula = "y ~ x") + 
  scale_fill_viridis_d(
    name = NULL, 
    option = "E", 
    begin = 0.4, end = 0.8
  ) + 
  theme_minimal(
    base_size = 30, 
    base_family = "Palatino"
  ) + 
  theme(legend.position = c(.15, .85))
```

:::


## Boxplot (box and whisker plot) {.smaller}

::: {.panel-tabset}

### Beginner

```{r}
#| label: p-boxplot-ex-beg
#| fig.asp: 1
#| output-location: column
# Try a different geom
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score)
) + 
  geom_boxplot() 
```

### Intermediate

```{r}
#| label: p-boxplot-ex-int
#| fig.asp: 1
#| output-location: column
# Adjust colors, new theme
ggplot(new_data) + 
  aes(x = group, y = score, fill = group) + 
  geom_boxplot() + 
  scale_fill_viridis_d(begin = 0.3, end = 0.8) + 
  theme_classic(base_size = 30) + 
  theme(legend.position = c(0.8, 0.85))
```

### Advanced

```{r}
#| label: p-boxplot-ex-adv
#| fig.asp: 1
#| output-location: column
# Overlay raw data
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_boxplot(aes(fill = group), show.legend = F) + 
  geom_jitter(
    height = 0, width = 0.2, 
    size = 4, alpha = 0.4
  ) + 
  scale_fill_viridis_d(
    name = NULL, 
    begin = 0.3, end = 0.8
  ) + 
  labs(x = NULL) + 
  theme_classic(base_size = 30) 
```

:::

## {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/rstats_iqr.png" background-size="contain" data-menu-title="What's a boxplot anyway?"}

## A better way... point estimate + spread {.smaller}

::: {.panel-tabset}

### Beginner

```{r}
#| label: p-point-estimate-spread-ex-beg
#| fig.asp: 1
#| output-location: column
# Point estimate can be mean, median, mode, 
# Spread can be SD, SE, 95% CI, etc.
ggplot(
  data = new_data, 
  mapping = aes(x = group, y = score) 
) + 
  stat_summary(
    fun.data = mean_sdl, 
    geom = 'pointrange', 
    size = 2, 
    linewidth = 2
  ) 
```

### Intermediate

```{r}
#| label: p-point-estimate-spread-ex-int
#| fig.asp: 1
#| output-location: column
# Customize, add caption
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_point(alpha = 0.3, size = 4) + 
  stat_summary(
    fun.data = mean_cl_boot, 
    geom = 'pointrange', 
    size = 4, 
    linewidth = 2
  ) + 
  labs(caption = "Mean ±95% CI") + 
  theme_minimal(base_size = 30)
```

### Advanced

```{r}
#| label: p-point-estimate-spread-ex-adv
#| fig-asp: 1
#| output-location: column
# Customize points and gridlines, add jitter
ggplot(new_data) + 
  aes(x = group, y = score) + 
  geom_jitter(
    height = 0, width = 0.2, 
    alpha = 0.3, size = 4
  ) + 
  stat_summary(
    aes(fill = group), 
    fun.data = mean_se, 
    geom = 'pointrange', 
    size = 3, linewidth = 2, 
    pch = 21, show.legend = F
  ) + 
  labs(y = "Score", x = NULL, caption = "Mean ±SE") + 
  scale_fill_viridis_d(
    option = "A", begin = 0.2, end = 0.6
  ) + 
  theme_minimal(
    base_size = 30, base_family = "Palatino"
  ) + 
  theme(
    axis.title.y = element_text(size = rel(0.9), hjust = 0.95),
    axis.title.x = element_text(size = rel(0.9), hjust = 0.95),
    panel.grid.major = element_line(color = 'grey80', linewidth = 0.15),
    panel.grid.minor = element_line(color = 'grey80', linewidth = 0.15)
  )
```

:::

## Faceting

- What about when we want to see more factors at once?

- For example, what if we want to see **score** as a function of **proficiency** and **age**?

- We use `facet_wrap()` or `facet_grid()` to create facets

```{r}
#| label: p-facets-ex
#| code-line-numbers: "5"
#| eval: false
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  facet_grid(. ~ age) + 
  geom_point()
```

## {data-title-menu="Faceting ex. 1"}

```{r}
#| label: p-shapes-ex1
#| fig-align: 'center'
#| code-line-numbers: "5"
ggplot(
  data = new_data, 
  mapping = aes(x = proficiency, y = score)
) + 
  facet_grid(. ~ age) + 
  geom_point()
```

## {data-title-menu="Faceting ex. 2"}

<br>

```{r}
#| label: p-shapes-ex2
#| code-line-numbers: "7"
#| output-location: column
#| fig-asp: 1
ggplot(
  data = new_data, 
  mapping = aes(
    x = age, y = score
  )
) + 
  facet_grid(group ~ .) + 
  geom_boxplot()
```


## More exercises {.smaller}

Using `new_data`, create the following

- a boxplot with a variable mapped to the `fill` aesthetic

- a boxplot with a variable mapped to the `color` aesthetic and a horizontal facet

- a scatterplot with a regression line (see `?geom_smooth`)

- a scatterplot with a regression line (see `?geom_smooth`) and a categorical factor (try the aesthetic `shape`)

- a histogram of `proficiency`

- What does `geom_violin()` do? What geom can it replace?


## [Next level... raw data + model estimates]{.emph} {.smaller background-color="black"}

```{r}
#| label: model-est-brm
#| echo: false
library("brms")
library("marginaleffects")
mod <- brm(
  formula = score ~ proficiency, 
  family = Beta(), 
  file = here("misc", "mod"), 
  data = mutate(
    new_data, score = if_else(score == 0, score + 0.001, score - 0.001)
    )
)
```

Let's fit a model. 
```{r}
#| label: model-est-brm-code
#| eval: false
#| echo: true
# Load some additional libraries
library("brms"); library("marginaleffects")

# Fit bayesian regression model
mod <- brm(formula = score ~ proficiency, family = Beta(), data = new_data)
```

Now we plot the raw data and the posterior predictive distribution
```{r}
#| label: model-est-brm-plot
#| echo: true
#| output: 'hold'
predictions(mod, newdata = datagrid(proficiency = seq(-2.5, 2.5, 0.1))) |>
  posterior_draws() |> 
  mutate(drawid = as.numeric(drawid)) |> 
  filter(drawid < 300) |> 
  ggplot() + 
  aes(x = proficiency, y = draw) + 
  geom_line(aes(group = drawid), alpha = 0.1) + 
  stat_summary(fun = mean, geom = "line", color = "#cc0033", linewidth = 2) + 
  geom_point(
    data = new_data, aes(y = score), 
    size = 3, pch = 21, fill = "grey30"
    ) +
  labs(
    y = "Score", x = "Proficiency", 
    title = "Scores as a function of proficiency", 
    subtitle = "300 draws from the posterior predictive distribution"
  ) + 
  ggdark::dark_theme_minimal(base_size = 18, base_family = "Palatino")
```

## {data-menu-title="Raw data + model estimates ex" background-color="black"}

```{r}
#| label: model-est-brm-plot
#| echo: false
```





# Review {.transition}

## Good principles 

- Remember 💩

- Colorblind friendly palettes (e.g., [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html))

- Highlight important things

- Help your target audience (reader)

- Plot raw data, and statistical summary or model estimates whenever possible

## Bad principles (according to the internet)

::::{.columns}
:::{.column width="50%"}
- Plots without context
- Illegible fonts
- A line graph with unordered x-axis
- A legend with a zillion categories
- A pie chart
- Axis with scientific notation
:::

:::{.column width="50%"}
- Uninterpretable variable names
- Dual y-Axis
- Bar plots that could be boxplots
- Non-color blind friendly color scales
- Angled text
:::
::::





# Take a bad plot and make it better {.transition visibility="uncounted"}

## {data-menu-title="Bad plots (revisited)"}

::: {.r-stack}
![](../assets/img/bad_plot_1){width="750" height="650"}

![](../assets/img/bad_plot_0){.fragment width="900" height="650"}

![](../assets/img/bad_plot_2){.fragment width="1000" height="650"}
:::






# Wrapping up {visibility="uncounted"}

## Help! (resources) {.transition}

- [SimplPoints (Timo Roettger youtube channel))](https://www.youtube.com/@simplpoints/videos)

- [Data Visualization with R (course)](https://datavizf23.classes.andrewheiss.com/syllabus.html)

- [The Truthful Art: Data, Charts, and Maps for Communication](https://www.amazon.com/Truthful-Art-Data-Charts-Communication/dp/0321934075)

- [Data Visualization: A Practical Introduction](http://socviz.co/)

- [Fundamentals of Data Visualization](https://serialmentor.com/dataviz/)

::: notes
@healy2018data
@cairo2016truthful
@wilke2019fundamentals
:::

## Thanks! {.final visibility="uncounted"}

![](https://a.espncdn.com/combiner/i?img=/i/teamlogos/ncaa/500/164.png){.absolute top="0" right="0" width="55" height="55"}

</br>

### Materials available here: 

### [bit.ly/dv4ss](https://bit.ly/dv4ss)

```{r}
#| label: tbl-final
#| tbl-colwidths: [25, 50, 25]
#| echo: false
tidyr::tibble(
  ` ` = c(
    "<a href='mailto:joseph.casillas@rutgers.edu'>{{< fa solid envelope >}}</a>", 
    "<a href='www.jvcasillas.com'>{{< fa solid link >}}</a>", 
    "<a href='https://twitter.com/jvcasill'>{{< fa brands twitter >}}</a>", 
    "<a href='https://github.com/jvcasillas'>{{< fa brands github >}}</a>"
  ), 
  `  ` = c(
    "joseph.casillas@rutgers.edu", 
    "www.jvcasillas.com", 
    "\\@jvcasill", 
    "\\@jvcasillas"
  ), 
  `   ` = c("&nbsp; &nbsp; &nbsp; &nbsp;", " ", " ", " ")
) |> 
  knitr::kable(align = c("r", "l", "l"))

```



## References {visibility="uncounted"}


