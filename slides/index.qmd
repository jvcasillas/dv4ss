---
title: "Data visualization for linguists"
subtitle: ""
author: "Joseph V. Casillas | Rutgers University"
institute: "14th Pronunciation in Second Langauge Learning and Teaching<br>Purdue University"
date: "2023/09/06 (Last update: `r Sys.Date()`)"
format: rutgers-revealjs
engine: knitr
---

```{r}
#| label: setup
#| include: false
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
  echo = FALSE, 
  fig.asp = 0.5625,
  out.width = "100%", 
  fig.retina = 2, 
  dpi = 300
  )

library("tidyverse")
library("ggimage")
library("patchwork")
library("here")
```

## Follow along

::::: {layout="[[-1], [1], [-1]]"}
:::: {.columns}
::: {.column width="33%"}
:::
::: {.column width="33%"}
{{< qrcode www.jvcasillas.com qrsite width=300 height=300 colorDark='#cc0033' colorLight='#fff' >}}
:::
::: {.column width="33%"}
:::
::::
:::::

---






## How to use this workshop

. . .

::: {.r-fit-text}
Do you know R?
:::

. . .

:::: {.columns}
::: {.column width="50%"}
[Yes]{style="color: blue;"}

- Follow along, do examples
- Watch
- Both (as attention allows)
:::

::: {.column width="50%"}
[No]{.emph}

- Watch
- Come back when time and resources allow
:::
::::

---






## {.transition auto-animate="true" #goals-1-id data-menu-title="Goals"}

[Goals]{.emph}

::: {style="margin-top: 200px; font-size: 1.25em; color: #fff;"}
make elegant, truthful plots  
:::

## {.transition auto-animate="true" #goals-2-id data-menu-title="Goals"}

[Goals]{.emph}

::: {style="margin-top: 70px; font-size: 1em; color: #B0B0B0;"}
make elegant, truthful plots
:::
::: {style="margin-top: 71px; font-size: 1.5em; color: #fff;"}
help reader understand data
:::

## {.transition auto-animate="true" #goals-3-id data-menu-title="Goals"}

[Goals]{.emph}

::: {style="margin-top: 60px; font-size: 1em; color: #C0C0C0;"}
make elegant, truthful plots
:::
::: {style="margin-top: 10px; font-size: 1em; color: #C0C0C0;"}
help reader understand data
:::
::: {style="margin-top: 10px; font-size: 1.5em; color: #fff;"}
make process repeatable, shareable
:::






## Goals (today) {auto-animate="true" #goals-today-1-id data-menu-title="Goals today"}

::: {style="margin-top: 200px; font-size: 1.5em;"}
get you started making elegant, truthful plots
:::

## Goals (today) {auto-animate="true" #goals-today-2-id data-menu-title="Goals today"}

::: {style="margin-top: 70px; font-size: 1.5em; color: #D0D0D0;"}
get you started making elegant, truthful plots
:::
::: {style="margin-top: 71px; font-size: 1.5em;"}
discuss pitfalls, bad practices
:::

## Goals (today) {auto-animate="true" #goals-today-3-id data-menu-title="Goals today"}

::: {style="margin-top: 60px; font-size: 1.5em; color: #D0D0D0;"}
get you started making elegant, truthful plots
:::
::: {style="margin-top: 20px; font-size: 1.5em; color: #D0D0D0;"}
discuss pitfalls, bad practices
:::
::: {style="margin-top: 20px; font-size: 1.5em;"}
provide resources to help you continue learning
:::





# {.transition}

Just use a table...  
the data speaks for itself

# {background-color="black" background-image="./assets/img/dino_data.gif" background-size="contain"}

::: footer
[datasaurus: same stats, different graph](https://www.research.autodesk.com/publications/same-stats-different-graphs/)
:::

# {.transition}

"Stats don't lie, but liars use stats"  
(same idea)

<!--
who said this?
-->






# {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/os_heartbreak.png"}

<!--
getting good takes time
  be patient
  be kind to yourself
  do the best you can at the time
-->

# {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/general/memes/sucking1.png" background-size=90%}

<!--
its ok to suck
-->

---






::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-1
#| echo: false

descriptions <- tribble(
  ~'x', ~'y', ~'lab', 
  -1.25, -1.25, "Back to the\ndrawing board", 
  -1.25,  1.25, "Fun, but\nuseless", 
   1.25, -1.25, "Suitable, but\nnot ideal", 
   1.25,  1.25, "The sweet spot"
)

p_goals_bare <- ggplot(data = tibble(x = c(-2, 2), y = c(-2, 2))) + 
  aes(x = x, y = y) + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  coord_cartesian(xlim = c(-2.1, 2.1), ylim = c(-2.1, 2.1)) + 
  labs(x = NULL, y = NULL) + 
  theme_minimal(base_size = 26, base_family = "Palatino") + 
  theme(
    axis.ticks = element_blank(), 
    axis.text = element_blank(), 
    panel.grid.major = element_line(color = 'grey90', linewidth = 0.15),
    panel.grid.minor = element_line(color = 'grey90', linewidth = 0.15)
  )

p_goals_bare
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-2
#| echo: false

p_goals_bare + 
  geom_rect(
    aes(xmin = -2, xmax = 0, ymin = -2, ymax = 2), 
    fill = "#cc0033", alpha = 0.1
  ) + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_text(
    data = tibble(x = 0, y = -2.1, lab = "← Interpretibility →"), 
    aes(x = x, y = y, label = lab), size = 10
  )
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-3
#| echo: false

p_goals_bare + 
  geom_rect(
    aes(xmin = 0, xmax = 2, ymin = -2, ymax = 2), 
    fill = "blue", alpha = 0.1
  ) + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_text(
    data = tibble(x = 0, y = -2.1, lab = "← Interpretibility →"), 
    aes(x = x, y = y, label = lab), size = 10
  )
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-4
#| echo: false

p_goals_bare + 
  geom_rect(
    aes(xmin = -2, xmax = 2, ymin = -2, ymax = 0), 
    fill = "#cc0033", alpha = 0.1
  ) + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_text(
    data = tibble(x = -2.1, y = 0, lab = "← Aesthetics →"), 
    aes(x = x, y = y, label = lab), angle = 90, size = 10
  )
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-5
#| echo: false

p_goals_bare + 
  geom_rect(
    aes(xmin = -2, xmax = 2, ymin = 0, ymax = 2), 
    fill = "blue", alpha = 0.1
  ) + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre") + 
  geom_text(
    data = tibble(x = -2.1, y = 0, lab = "← Aesthetics →"), 
    aes(x = x, y = y, label = lab), angle = 90, size = 10
  )
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-6
#| echo: false
p_goals <- p_goals_bare + 
  geom_segment(aes(x = -2, xend = 2, y = 0, yend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre", 
    arrow = arrow(ends = "both", length = unit(0.03, "npc"))) + 
  geom_segment(aes(y = -2, yend = 2, x = 0, xend = 0), linewidth = 1, 
    lineend = "round", linejoin = "mitre", 
    arrow = arrow(ends = "both", length = unit(0.03, "npc"))) + 
  labs(y = "Uninterpretable", x = "Ugly") + 
  scale_x_continuous(sec.axis = sec_axis(~., name = "Elegant")) + 
  scale_y_continuous(sec.axis = sec_axis(~., name = "Interpretable"))

p_goals
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-7
#| echo: false
p_goals + 
  geom_text(
    data = descriptions[1, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-8
#| echo: false
p_goals + 
  geom_text(
    data = descriptions[1:2, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-9
#| echo: false
p_goals + 
  geom_text(
    data = descriptions[1:3, ], 
    aes(label = lab), color = "#cc0033"
  ) 
```

:::

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-goals-10
#| echo: false
p_goals + 
  geom_rect(
    aes(xmin = 0, xmax = 2, ymin = 0, ymax = 2), 
    fill = "green", alpha = 0.1
  ) + 
  geom_text(
    data = descriptions, 
    aes(label = lab)
  ) 
```

:::






# {background-image="https://raw.githubusercontent.com/jvcasillas/media/master/general/memes/draw_owl.png" background-size=65%}

---

::: {layout="[[-1], [1], [-1]]"}

```{r}
#| label: p-flexibility-difficulty
#| echo: false

img_vec <- list.files(
  here("slides", "assets", "img", "ggimage"), 
  full.names = T
  )

tribble(
  ~'x', ~'y', ~'img',    ~'url',      ~'size', 
  -2.5,  -2.5, 'excel',   img_vec[1],   0.15, 
  -1.0,  -1.0, 'spss',    img_vec[2],   0.15, 
   1.3,   1.8, 'r',       img_vec[3],   0.18, 
   2.5,   1.9, 'd3',      img_vec[4],   0.12, 
   2.5,   0.5, 'python',  img_vec[5],   0.15, 
   2.5,   2.7, 'plotly',  img_vec[6],   0.25, 
  -2.2,  -1.3, 'jasp',    img_vec[7],   0.15, 
   1.4,  -0.5, 'matlab',  img_vec[8],   0.15, 
   0.0,   0.0, 'tableau', img_vec[9],   0.30, 
  ) |>
  ggplot() + 
  aes(x = x, y = y, label = img) + 
  geom_image(aes(image = url, size = size)) + 
  scale_size_identity() + 
  coord_cartesian(xlim = c(-3, 3), ylim = c(-3, 3)) + 
  labs(y = "Flexibility\nand power", x = "Learning curve") + 
  theme_classic(base_family = "Palatino") + 
  theme(
    axis.title = element_text(size = 18), 
    axis.title.y = element_text(angle = 0, vjust = 0.5), 
    axis.text = element_blank(), 
    axis.ticks = element_blank()
  )
```

:::

---






ugliest plot in the world

---

principles of graphic design
  - CRAP (contrast, alignment, repetition, proximity)
  - Contrast: two things aren't the same, then make them very different
    - fonts (family, weight, size), colors (complex, accessibility for color blindness, color.adobe.com), shapes
  - Repetition: repeat things throughout doc, pres., etc.
    - colors palettes, fonts (families, weights, sizes), other graphical elements (alignments, etc.)
  - Alignment: everything on page/screen/plot has visual connection with something else on page/screen/plot
    - use guidelines to check
  - Proximity: group related items together
    - less applicable to dataviz
  - learnable, takes practice

---

common types of plots

pie charts
bar graphs
historgrams, density plots
boxplots
scatterplots
heatmaps
etc.

---

principles of grammar of graphics
  - map data to aesthetics

---

GoG applied, ggplot2
  data
  aesthetics
  geoms
  scales
  facets
  coordinates
  labels
  theme

---

good principles (remember crap)
  colors
  highlight important things
  help audience (reader)

---

bad principles

---

practical examples
  take a bad plot and make it better

---

Helpful resources

- https://datavizf23.classes.andrewheiss.com/syllabus.html
- Alberto Cairo, The Truthful Art: Data, Charts, and Maps for Communication (Berkeley, California: New Riders, 2016).
- Kieran Healy, Data Visualization: A Practical Introduction (Princeton: Princeton University Press, 2018), http://socviz.co/
- Claus E. Wilke, Fundamentals of Data Visualization (Sebastopol, California: O’Reilly Media, 2018), https://serialmentor.com/dataviz/
- 

---







<!--



background-color: black
background-image: url(https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tidyverse.png), url(https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png)
background-size: 500px, 250px
background-position: 50% 50%, 5% 50%

---
class: title-slide-section-grey, center, middle

# Data visualization 101

.big[Plotting with `ggplot`]

---

# Data visualization 101

### Basic plot types

.large[

.pull-left[

- Scatterplots

- Bargraph

- Boxplots

- Point estimate + spread

]

]

--

.pull-right[

- Imagine we are interested in learning more about gas mileage. 

- We have the `mtcars` dataset that will allow us to look at miles per gallon 
(**mpg**), engine displacement (**disp**), and transmission type (**am**)

- **mpg** and **disp** are continuous variables, **am** is categorical

]


---

# Data visualization 101

### Scatterplot

- When you have two continuous variables

```{r, scatterplot-ex, fig.retina=2, echo=F, fig.height=5, fig.width=10, fig.align='center'}
mtcars %>%
  ggplot(., aes(x = disp, y = mpg, fill = factor(am))) + 
    geom_point(pch = 21, size = 2)  + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

???

```
mtcars %>%
  ggplot(., aes(x = disp, y = mpg, fill = factor(am))) + 
    geom_point(pch = 21, size = 2)  + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

---

# Data visualization 101

### Bargraph

- Please never make a bargraph

```{r, bargraph-ex, fig.retina=2, echo=F, fig.height=5, fig.width=10, fig.align='center'}
mtcars %>%
  group_by(am) %>% 
  summarize(mean_mpg = mean(mpg)) %>% 
  ggplot(., aes(x = factor(am), y = mean_mpg, fill = factor(am))) + 
    geom_bar(stat = 'identity') + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

???

```
mtcars %>%
  group_by(am) %>% 
  summarize(mean_mpg = mean(mpg)) %>% 
  ggplot(., aes(x = factor(am), y = mean_mpg, fill = factor(am))) + 
    geom_bar(stat = 'identity') + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

---
background-color: black
background-image: url(https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/rstats_bargraphs.png)
background-size: contain
background-position: 100% 50%

# Data visualization 101

### Bargraph

---

# Data visualization 101

### Boxplot (box and whisker plot)

- Better option than bargraph

```{r, boxplot-ex, fig.retina=2, echo=F, fig.height=5, fig.width=10, fig.align='center'}
mtcars %>%
  ggplot(., aes(x = factor(am), y = mpg, fill = factor(am))) + 
    geom_boxplot() + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

???

```
mtcars %>%
  ggplot(., aes(x = factor(am), y = mpg, fill = factor(am))) + 
    geom_boxplot() + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

---
background-color: black
background-image: url(https://raw.githubusercontent.com/jvcasillas/media/master/rstats/memes/rstats_iqr.png)
background-size: contain

---

# Data visualization 101

### Point estimate + spread

- Point estimate can be mean, median, mode, 
- Spread can be SD, SE, 95% CI, etc.

```{r, point-estimate-ex, fig.retina=2, echo=F, fig.height=5, fig.width=10, fig.align='center'}
mtcars %>%
  ggplot(., aes(x = factor(am), y = mpg, fill = factor(am))) + 
    stat_summary(fun.data = mean_sdl, geom = 'pointrange', pch = 21, 
                 size = 1.5) + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```

???

```
mtcars %>%
  ggplot(., aes(x = factor(am), y = mpg, fill = factor(am))) + 
    stat_summary(fun.data = mean_sdl, geom = 'pointrange', pch = 21, 
                 size = 1.5) + 
    ylim(0, 40) + 
    xlab('') + 
    scale_x_discrete(breaks = c(0, 1), labels = c('Automatic', 'Manual')) + 
    scale_fill_brewer(palette = "Set2", name = '', 
                      labels = c('Automatic', 'Manual')) + 
    theme_grey(base_size = 18, base_family = 'Times')
```


---
class: title-slide-section-grey, center, middle

# What you need to know

.big[A grammar of graphics]

---

# ggplot2

### Overview

- Written by Hadley Wickham when he was a graduate student at Iowa State

- Automatically deals with spacings, text, titles but also allows you to annotate by "adding"

- Plots are built up in layers 

- Plot the data, overlay a summary, meta data and annotation

---

# ggplot2

### Components

- Works with a dataframe

- aesthetic mappings: how data are mapped to color, size

- geoms: geometric objects like points, lines, shapes

- stats: statistical transformations

- facets: for conditional plots

---

# ggplot2

### It starts with data

- We will continue using the `mtcars` dataframe

- Fire up RStudio, load the `tidyverse` and take a look at `mtcars`

- Try using `glimpse(mtcars)`, , `head(mtcars)`, `dim(mtcars)`, and `summary(mtcars)`

- What kind of information did you learn about the dataframe?

---

# ggplot2

### It starts with data

```{r, mtcars-explore1}
glimpse(mtcars)
dim(mtcars)
```

---

# ggplot2

### It starts with data

```{r, mtcars-explore2}
head(mtcars, 15)
```

---

# ggplot2

### It starts with data

```{r, mtcars-explore3}
summary(mtcars)
```

---

# ggplot2

### It starts with data

- We will start all of our plots in the same way... using the dataframe and 
the pipe operator (**%>%**) like this: 

--

```{r, pipe, eval=FALSE}
# Call dataframe and 'pipe' into ggplot function
mtcars %>%  #<<
  ggplot(., )
```

--

- Notice that I have commented my code

- The pipe operator sends whatever is on the left of the pipe (`mtcars`) to whatever is on the right side (`ggplot`)

- Specifically, it sends whatever is on the left to the following **.**

- As is, this code won't do anything yet

---

# ggplot2

### Aesthetics (aes)

- aesthetic mappings: how data are mapped to color, size, and **axis**
- Let's update our code: 

```{r, aes-ex, fig.show='hide'}
# Call dataframe and 'pipe' into ggplot function
# Add aesthetic mapping to x and y axis
mtcars %>%  
  ggplot(., aes(x = disp, y = mpg)) #<<
```

--

```{r, ref.label='aes-ex', echo=F, fig.retina=2, fig.align='center', fig.height=3.25, fig.width=8}
```

---

# ggplot2

### Geometric objects (geom_)

- Whenever you want to make a plot you have to think about what kind of geometric object makes sense for your needs. What do we need here?

--

```{r, geom-ex, fig.show='hide'}
# Call dataframe and 'pipe' into ggplot function
# Add aesthetic mapping to x and y axis
# Add geometric object (geom_point)
mtcars %>%  
  ggplot(., aes(x = disp, y = mpg)) + # We 'add' a layer to the plot
    geom_point() #<<
```

--

```{r, ref.label='geom-ex', echo=F, fig.retina=2, fig.align='center', fig.height=3.25, fig.width=8}
```

---

# ggplot2

### Geometric objects (geom_)

- There are many types of geoms
  - `geom_point()`
  - `geom_smooth()`
  - `geom_hist()`
  - `geom_bar()`
  - `geom_boxplot()`
  - etc. 

- Exercise
  - Recall that `mtcars` has a lot of variables (see `glimpse(mtcars)`)
  - Try swapping other variables for x and y
  - Add a smoother to the plot (`geom_smooth()`)
  - Add more aesthetics (try `color` and `shape`). What happens?
  - Add a geom to make a boxplot

---

# ggplot2

### Statistical transformations (stat_)

- We can use the `stat_summary()` function to calculate a value and overlay it 
on the plot

.pull-left[

```{r, 'stat-sum-ex', echo=T, eval=F}
mtcars %>%
  ggplot(., aes(x = am, y = mpg)) + 
    stat_summary(fun.data = mean_sdl, 
                 geom = 'pointrange')
```

]


.pull-right[

```{r, ref.label='point-estimate-ex', fig.retina=2, echo=F, fig.height=5, fig.width=10, fig.align='center'}
```

]

---

# ggplot2

### Faceting

- What about when we want to see more factors at once?
- For example, what if we want to see **mpg** as a function of **am** and **cyl**?

--

#### Solution 1a

.pull-left[

```{r, facets-ex, fig.show='hide'}
mtcars %>% 
  ggplot(., aes(x = am, y = mpg)) + 
    stat_summary(fun.data = mean_sdl, 
                 geom = 'pointrange') + 
    facet_grid(. ~ cyl) #<<
```

]

.pull-right[

```{r, ref.label='facets-ex', fig.retina=2, echo=F, fig.height=3.5, fig.width=6}
```

]

---

# ggplot2

### Faceting

- What about when we want to see more factors at once?
- For example, what if we want to see **mpg** as a function of **am** and **cyl**?

#### Solution 1b

.pull-left[

```{r, facets-ex2, fig.show='hide'}
mtcars %>% 
  ggplot(., aes(x = am, y = mpg)) + 
    stat_summary(fun.data = mean_sdl, 
                 geom = 'pointrange') + 
    facet_grid(cyl ~ .) #<<
```

]

.pull-right[

```{r, ref.label='facets-ex2', fig.retina=2, echo=F, fig.height=3.5, fig.width=6}
```

]

---

# ggplot2

### Faceting

- What about when we want to see more factors at once?
- For example, what if we want to see **mpg** as a function of **am** and **cyl**?

#### Solution 2

.pull-left[

```{r, shapes-ex, fig.show='hide'}
mtcars %>% 
  ggplot(., aes(x = factor(am), y = mpg, 
                shape = factor(cyl))) +  #<<
    stat_summary(fun.data = mean_sdl, 
                 geom = 'pointrange', 
                 position = position_dodge(0.5))
```
]

.pull-right[

```{r, ref.label='shapes-ex', fig.retina=2, echo=F, fig.height=3.5, fig.width=6}
```

]

---

# More exercises

### Using `mtcars`, create the following

- a boxplot with a variable mapped to the `fill` aesthetic

- a boxplot with a variable mapped to the `color` aesthetic and a horizontal facet

- a scatterplot with a regression line (see `?geom_smooth`)

- a scatterplot with a regression line (see `?geom_smooth`) and a categorical factor (try the aesthetic `shape`)

- a histogram of `mpg`

- What does `geom_violin()` do? What geom can it replace?

---
class: title-slide-final, middle
background-image: url(https://github.com/jvcasillas/ru_xaringan/raw/master/img/logo/ru_shield.png), url(https://www.r-project.org/Rlogo.png)
background-size: 55px, 100px
background-position: 9% 15%, 89% 15%

# Getting help

## If you have problems using ggplot2
## ask for help in the slack channel

### You can find some very basic tutorials related to 
### plotting in R [here][here]

[here]: http://www.jvcasillas.com/base_lattice_ggplot/


-->
